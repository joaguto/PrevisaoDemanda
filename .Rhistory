df = filter(df, Demanda_Ajustada < 13)
# Dados complementares
cliente <- fread('Dataset/cliente_tabla.csv')
produto <- fread('Dataset/producto_tabla.csv')
cidade <- fread('Dataset/town_state.csv', encoding = 'UTF-8')
system("gruop_bimbo.db")
# Criando driver e conexão ao banco de dados
drv = dbDriver("SQLite")
# Criando o banco de dados
con = dbConnect(drv, dbname = "grupo_bimbo.db")
# Coletando 10000 Dados na base de treino
# Tive problemas com o processamento de dados e por isso optei por essa alternativa
qry = 'SELECT * FROM treino ORDER BY RANDOM() LIMIT 100000'
rs = dbSendQuery(con, qry)
dados = fetch(rs)
treino = dados
dados = NULL
dbDisconnect(con)
# Salvando amostra dos arquivos de treino
write.csv(treino, 'Dataset/train_amostra.csv')
# Agrupando as bases
treino = left_join(treino, produto, by = 'Producto_ID')
treino = left_join(treino, cidade, by = 'Agencia_ID')
# Renomando as variavais
names(treino) = c('Semana', 'Agencia_ID', 'Canal_ID', 'Rota_ID', 'Cliente_ID',
'Produto_ID', 'Vendas_Unitarias_Semana', 'Vendas_Pesos_Semana',
'Unidades_Proxima_Semana', 'Peso_Proxima_Semana', 'Demanda_Ajustada',
'Cidade', 'Estado', 'NomeProduto')
# Salvando base nova
write.csv(treino, 'Dataset/train_amostra.csv')
# Realizando o upload dos dados
df = fread('Dataset/train_amostra.csv')
df$V1 = NULL
df$Semana = as.factor(df$Semana)
df$Agencia_ID = as.character(df$Agencia_ID)
df$Canal_ID = as.character(df$Canal_ID)
df$Rota_ID =  as.character(df$Rota_ID)
df$Cliente_ID = as.character(df$Cliente_ID)
df$Produto_ID = as.character(df$Produto_ID)
# Verificando se existe dados ausentes
any(is.na(df))
# Vizualizando o numero de Semanas
table(df$Semana)
# Explorando Variavel Target
boxplot(df$Demanda_Ajustada)
# Realizando o upload dos dados
df = fread('Dataset/train_amostra.csv')
# Vizualizando o numero de Semanas
table(df$Semana)
# Explorando Variavel Target
boxplot(df$Demanda_Ajustada)
hist(df$Demanda_Ajustada)
summary(df$Demanda_Ajustada)
# Foi identificado muito Outliers nos dados
# Se eu optar por apenas excluir os dados utilizando o 3 quartil,
# estarei perdendo ~22% dos meu dados
nrow(filter(df, Demanda_Ajustada > 7.5))/nrow(df)
# No entando, se eu aumentar um pouco a minha margem, fico apenas com 10% de perda
# Estarei optando por essa opção:
nrow(filter(df, Demanda_Ajustada > 13))/nrow(df)
# No entando, se eu aumentar um pouco a minha margem, fico apenas com 10% de perda
# Estarei optando por essa opção:
nrow(filter(df, Demanda_Ajustada > 50))/nrow(df)
df = filter(df, Demanda_Ajustada < 50)
# Explorando Variavel limpa
# Explorando Variavel Target
boxplot(df$Demanda_Ajustada)
hist(df$Demanda_Ajustada)
summary(df$Demanda_Ajustada)
summary(df$Demanda_Ajustada)
# Foi identificado muito Outliers nos dados
# Se eu optar por apenas excluir os dados utilizando o 3 quartil,
# estarei perdendo ~22% dos meu dados
nrow(filter(df, Demanda_Ajustada > 7.5))/nrow(df)
# Foi identificado muito Outliers nos dados
# Se eu optar por apenas excluir os dados utilizando o 3 quartil,
# estarei perdendo ~22% dos meu dados
nrow(filter(df, Demanda_Ajustada > 10))/nrow(df)
df = filter(df, Demanda_Ajustada < 10)
# No entando, se eu aumentar um pouco a minha margem, fico apenas com ~1% de perda
# Estarei optando por essa opção:
nrow(filter(df, Demanda_Ajustada > 10))/nrow(df)
# No entando, se eu aumentar um pouco a minha margem, fico apenas com ~1% de perda
# Estarei optando por essa opção:
nrow(filter(df, Demanda_Ajustada > 10))/nrow(df)
# Explorando Variavel limpa
boxplot(df$Demanda_Ajustada)
hist(df$Demanda_Ajustada)
summary(df$Demanda_Ajustada)
hist(df$Demanda_Ajustada, breaks = 5)
View(df)
df$V1 = NULL
View(df)
# Explorando Variavel limpa
boxplot(df$Demanda_Ajustada)
hist(df$Demanda_Ajustada, breaks = 5)
summary(df$Demanda_Ajustada)
library(moments)
skewness(df$Demanda_Ajustada)
# Verificando o Coeficiente de Assimetria
skewness(df$Demanda_Ajustada)
View(df)
View(df)
# Verificando qual semana possui um numero de demanda maior
semana = df %>%
group_by(semana) %>%
summarise(Demanda_Media = mean(Demanda_Ajustada),
Demanda_Soma = mean(Demanda_Ajustada))
View(df)
# Verificando qual semana possui um numero de demanda maior
semana = df %>%
group_by(Semana) %>%
summarise(Demanda_Media = mean(Demanda_Ajustada),
Demanda_Soma = mean(Demanda_Ajustada))
##########################################################################################
# Analise Exploratoria dos Dados
library(ggplot2)
ggplot(semana, aes(x = Semana, y = Demanda_Media, fill = as.factor(Semana))) +
geom_bar(stat = 'identity') +
ggtitle('Média de Demanda Ajustada por Semana') +
xlab('N° Semana') +
ylab('Demanda') +
theme_light()
ggplot(semana, aes(x = Semana, y = Demanda_Media, fill = as.factor(Semana))) +
geom_bar(stat = 'identity') +
ggtitle('Média de Demanda Ajustada por Semana') +
xlab('N° Semana') +
ylab('Demanda') +
theme_light() +
geom_label(label = round(Demanda_Media, 2))
ggplot(semana, aes(x = Semana, y = Demanda_Media, fill = as.factor(Semana))) +
geom_bar(stat = 'identity') +
ggtitle('Média de Demanda Ajustada por Semana') +
xlab('N° Semana') +
ylab('Demanda') +
theme_light() +
geom_label( aes(round(Demanda_Media, 2)))
ggplot(semana, aes(x = Semana, y = Demanda_Media, fill = as.factor(Semana))) +
geom_bar(stat = 'identity') +
ggtitle('Média de Demanda Ajustada por Semana') +
xlab('N° Semana') +
ylab('Demanda') +
theme_light() +
geom_label( aes(label = round(Demanda_Media, 2)))
ggplot(semana, aes(x = Semana, y = Demanda_Soma, fill = as.factor(Semana))) +
geom_bar(stat = 'identity') +
ggtitle('Soma de Demanda Ajustada por Semana') +
xlab('N° Semana') +
ylab('Demanda') +
theme_light() +
geom_label( aes(label = round(Demanda_Soma, 2)))
# Verificando qual semana possui um numero de demanda maior
semana = df %>%
group_by(Semana) %>%
summarise(Demanda_Media = mean(Demanda_Ajustada),
Demanda_Soma = sum(Demanda_Ajustada))
ggplot(semana, aes(x = Semana, y = Demanda_Soma, fill = as.factor(Semana))) +
geom_bar(stat = 'identity') +
ggtitle('Soma de Demanda Ajustada por Semana') +
xlab('N° Semana') +
ylab('Demanda') +
theme_light() +
geom_label( aes(label = round(Demanda_Soma, 2)))
library(patchwork)
(g1/g2)
g1 = ggplot(semana, aes(x = Semana, y = Demanda_Media, fill = as.factor(Semana))) +
geom_bar(stat = 'identity') +
ggtitle('Média de Demanda Ajustada por Semana') +
xlab('N° Semana') +
ylab('Demanda') +
theme_light() +
geom_label( aes(label = round(Demanda_Media, 2)))
g2 = ggplot(semana, aes(x = Semana, y = Demanda_Soma, fill = as.factor(Semana))) +
geom_bar(stat = 'identity') +
ggtitle('Soma de Demanda Ajustada por Semana') +
xlab('N° Semana') +
ylab('Demanda') +
theme_light() +
geom_label( aes(label = round(Demanda_Soma, 2)))
(g1/g2)
# Calculando o Desvio Padrão
semana = df %>%
group_by(Semana) %>%
summarise(Demanda_Media = mean(Demanda_Ajustada),
Demanda_Soma = sum(Demanda_Ajustada),
Desv_Padrao = sd(Demanda_Ajustada))
g3 = ggplot(semana, aes(x = Semana, y = Desv_Padrao, fill = as.factor(Semana))) +
geom_bar(stat = 'identity') +
ggtitle('Desv Padrao de Demanda Ajustada por Semana') +
xlab('N° Semana') +
ylab('Desvio') +
theme_light() +
geom_label( aes(label = round(Desv_Padrao, 2)))
(g1/g2 | g3)
View(df)
# Verificando distribuição dos estados
table(df$Estado)
table(df$NomeProduto)
View(df)
# Verificando correlações de forma macro
library(corrplot)
corrplot(cor(df[7:11]))
corrplot(cor(df[, 7:11]))
names(df)
ggplot(df, aes(x = Demanda_Ajustada, y =Vendas_Unitarias_Semana )) +
geom_point()
ggplot(df, aes(x = Demanda_Ajustada, y =Vendas_Pesos_Semana )) +
geom_point()
str(df)
# Verificando as demandas ao longo do tempo
ggplot(df, aes(x = Semana, y =Demanda_Ajustada )) +
geom_line(stat = 'identity') +
geom_smooth(method = 'lm', se = TRUE) +
ggtitle('Demanda Ajusta ao longo das Semanas') +
theme_light()
# Verificando as demandas ao longo do tempo
ggplot(df, aes(x = Semana, y =Demanda_Ajustada )) +
geom_line() +
geom_smooth(method = 'lm', se = TRUE) +
ggtitle('Demanda Ajusta ao longo das Semanas') +
theme_light()
# Verificando as demandas ao longo do tempo
ggplot(semana, aes(x = Semana, y =Demanda_Ajustada )) +
geom_line() +
geom_smooth(method = 'lm', se = TRUE) +
ggtitle('Demanda Ajusta ao longo das Semanas') +
theme_light()
View(semana)
# Verificando as demandas ao longo do tempo
ggplot(semana, aes(x = Semana, y =Demanda_Soma )) +
geom_line() +
geom_smooth(method = 'lm', se = TRUE) +
ggtitle('Demanda Ajusta ao longo das Semanas') +
theme_light()
View(df)
ggplot(df, aes(x = Semana, y =Vendas_Unitarias_Semana )) +
geom_line() +
geom_smooth(method = 'lm', se = TRUE) +
ggtitle('Vendas ao longo das Semanas') +
theme_light()
# Verificando a distribuição das variaveis numericas
hist(df[, 7])
# Verificando a distribuição das variaveis numericas
hist(df$Vendas_Unitarias_Semana)
boxplot(df$Vendas_Unitarias_Semana)
hist(df$Unidades_Proxima_Semana)
boxplot(df$Unidades_Proxima_Semana)
# Verificando a distribuição das variaveis numericas
hist(df$Vendas_Unitarias_Semana)
# Removendo alguns Outliers
filter(df, Unidades_Proxima_Semana < 150, Vendas_Unitarias_Semana < 60)
# Removendo alguns Outliers
df = filter(df, Unidades_Proxima_Semana < 150, Vendas_Unitarias_Semana < 60)
View(df)
# Verificando as melhores agencias
agencia = df %>%
group_by(Agencia_ID) %>%
summarise(mediaVendas = mean(Vendas_Unitarias_Semana),
somaVendas = sum(Vendas_Unitarias_Semana),
desv = sd(Vendas_Unitarias_Semana),
assimetriaa = skewness(Vendas_Unitarias_Semana)) %>%
arrange(desc(mediaVendas))
View(agencia)
View(df)
corrplot(cor(df[, 7:11]))
#######################################################################
# Feature Selection
library(randomForest)
View(df)
# Excluindo os dados que repetidos
df$Cidade = NULL
df$Estado = NULL
df$NomeProduto = NULL
# Criando modelo de teste
teste = randomForest(Demanda_Ajustada~., importance = TRUE)
# Criando modelo de teste
teste = randomForest(Demanda_Ajustada~., data = df, importance = TRUE)
summary(teste)
varImpPlot(teste)
View(agencia)
toPlot = filter(df, Agencia_ID == c('1250', '1255', '1593', '1142', '1579'))
View(toPlot)
# Normalizando os dados
scale(df[, 7:10])
# Normalizando os dados
df = scale(df[, 7:10])
View(df)
# Realizando o upload dos dados
df = fread('Dataset/train_amostra.csv')
df$V1 = NULL
df$Semana = as.factor(df$Semana)
df$Agencia_ID = as.character(df$Agencia_ID)
df$Canal_ID = as.character(df$Canal_ID)
df$Rota_ID =  as.character(df$Rota_ID)
df$Cliente_ID = as.character(df$Cliente_ID)
df$Produto_ID = as.character(df$Produto_ID)
df = filter(df, Demanda_Ajustada < 10)
# Removendo alguns Outliers
df = filter(df, Unidades_Proxima_Semana < 150, Vendas_Unitarias_Semana < 60)
# Normalizando os dados
df[, 7:10] = scale(df[, 7:10])
# Excluindo os dados que repetidos
df$Cidade = NULL
df$Estado = NULL
df$NomeProduto = NULL
# Normalizando os dados
df[,7] = scale(df[,7])
df[, 8] = scale(df[,8])
df[, 9]= scale(df[,9])
df[, 10]= scale(df[,10])
View(df)
teste2 = randomForest(Demanda_Ajustada~., data = df, importance = TRUE)
varImpPlot(teste2)
# Deletando Variaveis não necessarias:
df$Cliente_ID = NULL
df$Canal_ID = NULL
library(caTools)
# Separando os dados
apoio = sample.split(df$Semana, 0.7)
treino = df[apoio, ]
teste = df[apoio== FALSE, ]
####################################################################
# Criando Modelos Preditivos
model1 = lm(Demanda_Ajustada~., data = df)
####################################################################
# Criando Modelos Preditivos
model1 = lm(Demanda_Ajustada~., data = treino)
View(teste)
View(model1)
teste = df[apoio== FALSE,0:10]
View(df)
teste = df[apoio== FALSE,0:8]
real = df[df[apoio== FALSE,9]]
real = df[df[apoio== FALSE,9]]
real = df[apoio== FALSE,9]]
real = df[apoio== FALSE,9]
previsao1 = predict(model1, teste)
previsao1 = predict(teste2, teste)
####################################################################
# Criando Modelos Preditivos
model1 = randomForest(Demanda_Ajustada~., data = treino)
previsao1 = predict(model1, teste)
####################################################################
# Criando Modelos Preditivos
library(caret)
final = data.frame(real, previsao1)
View(final)
final$diferenca = final$real - final$previsao1
final$diferenca = real -previsao1
View(final)
View(final)
final$diferenca = Demanda_Ajusta -previsao1
final$diferenca = Demanda_Ajustada - previsao1
View(final)
final$diferenca = final$Demanda_Ajustada - final$previsao1
View(final)
final$diferenca = final$Demanda_Ajustada - final$previsao1
View(final)
final = final %>%
mutate(diferenca = Demanda_Ajustada - previsao1)
View(final)
hist(final$diferenca)
View(final)
summary(modelo)
summary(model1)
# Modelo 2 - Neuralnet
library(neuralnet)
model2 = neuralnet(Demanda_Ajustada~., data = treino)
model2 = neuralnet(Demanda_Ajustada~., treino, hidden=c(5,4))
?neuralnet
model2 = neuralnet(Demanda_Ajustada~., treino, hidden=c(5,4), linear.output = FALSE)
neural = treino
View(neural)
# Deletando Variaveis não necessarias:
df$Cliente_ID = NULL
write.csv(treino, 'neural.csv')
neural = read.csv('neural.csv')
str(neural)
model2 = neuralnet(Demanda_Ajustada~., neural)
predict(model2, teste)
predict(model2, teste)
write.csv(teste, 'teste.csv')
neural = read.csv('teste.csv')
predict(model2, neural)
final2 = predict(model2, neural)
final2 = data.frame(real, final2)
View(final2)
final2 = final %>%
mutate(diferenca = Demanda_Ajustada - final2)
hist(final2$diferenca)
View(final2)
View(final2)
previsao2 = predict(model2, neural)
final2 = data.frame(real, previsao2)
final2 = final %>%
mutate(diferenca = Demanda_Ajustada - previsao2)
View(final2)
View(final2)
final2 = data.frame(real, previsao2)
View(final2)
final2 = final %>%
mutate(diferenca = Demanda_Ajustada - previsao2)
View(final2)
final2 = data.frame(real, previsao2)
final2 = final2 %>%
mutate(diferenca = Demanda_Ajustada - previsao2)
hist(final2$diferenca)
# Modelo3 - bayesian-linear-regression
model3<- stan_glm(Demanda_Ajustada~., data = treino)
suppressPackageStartupMessages(library(mlbench))
suppressPackageStartupMessages(library(rstanarm))
suppressPackageStartupMessages(library(bayestestR))
# Modelo3 - bayesian-linear-regression
model3<- stan_glm(Demanda_Ajustada~., data = treino)
install.packages(c('mlbench', 'rstanarm', 'bayestestR', 'bayesplot', 'insight', 'broom'))
install.packages(c('mlbench', 'rstanarm', 'bayestestR', 'bayesplot', 'insight', 'broom'))
suppressPackageStartupMessages(library(mlbench))
suppressPackageStartupMessages(library(rstanarm))
suppressPackageStartupMessages(library(bayestestR))
suppressPackageStartupMessages(library(bayesplot))
suppressPackageStartupMessages(library(insight))
suppressPackageStartupMessages(library(broom))
# Modelo3 - bayesian-linear-regression
model3<- stan_glm(Demanda_Ajustada~., data = treino)
previsao3 <- predict(model3, teste)
final3 = data.frame(real, previsao3)
final3 = data.frame(real, previsao3)
previsao3
length(previsao3)
previsao3 <- predict(model3, teste)
final3 = data.frame(real, previsao3)
final3 = data.frame(real, previsao3[0:24706])
View(final3)
final3 = final3 %>%
mutate(diferenca = Demanda_Ajustada - previsao2)
# Modelo 2 - Neuralnet
# Pequeno ajuste como o algoritmo não aceita valores não numericos
library(dplyr)
final3 = final3 %>%
mutate(diferenca = Demanda_Ajustada - previsao2)
hist(final3$diferenca)
View(final3)
final3 = final3 %>%
mutate(diferenca = Demanda_Ajustada - previsao3.0.24706.)
hist(final3$diferenca)
hist(final3$diferenca, breaks = 15)
hist(final3$diferenca, breaks = 30)
hist(final3$diferenca, breaks = 50)
View(final)
# Modelo1
summary(final$diferenca)
# Modelo1
summary(final$diferenca)
hist(final$diferenca)
boxplot(final$diferenca)
qqnorm(final$diferenca)
qqline(final$diferenca)
# Modelo2
summary(final3$diferenca)
hist(fina3l$diferenca)
hist(final3$diferenca)
boxplot(final3$diferenca)
qqnorm(final3$diferenca)
qqline(final3$diferenca)
# Verificando a quantidade de erro por Agencia ID
rbind(final, teste)
# Verificando a quantidade de erro por Agencia ID
data.frame(final, teste)
# Verificando a quantidade de erro por Agencia ID
erro = data.frame(final, teste)
View(erro)
erro_id = erro %>%
group_by(Agencia_ID) %>%
summarise(mediaErro = mean(diferenca),
desvPadrao = sd(diferenca)) %>%
arrange(desc(mediaErro))
View(erro_id)
library(randomForest)
?randomForest
varImpPlot(teste2)
View(treino)
model1.1 = randomForest(Demanda_Ajustada~ -Rota_ID, data = treino, )
model1.1 = randomForest(Demanda_Ajustada~ .-Rota_ID, data = treino, )
final1.1 = data.frame(real, previsao1.1)
previsao1.1 = predict(model1.1, teste)
final1.1 = data.frame(real, previsao1.1)
final1.1 = final1.1 %>%
mutate(diferenca = Demanda_Ajustada - previsao1.1)
summary(final1.1$diferenca)
hist(final1.1$diferenca)
# Modelo1
summary(final$diferenca)
hist(final$diferenca)
summary(final1.1$diferenca)
hist(final1.1$diferenca)
model1.2 = randomForest(Demanda_Ajustada~ .-Rota_ID, data = treino, ntree = 25 )
previsao1.2 = predict(model1.2, teste)
final1.1 = data.frame(real, previsao1.2)
final1.1 = data.frame(real, previsao1.1)
final1.1 = final1.1 %>%
mutate(diferenca = Demanda_Ajustada - previsao1.1)
final1.2 = data.frame(real, previsao1.2)
final1.2 = final1.2 %>%
mutate(diferenca = Demanda_Ajustada - previsao1.2)
summary(final1.1$diferenca)
summary(final1.2$diferenca)
# Tentativa 3
model1.3 = randomForest(Demanda_Ajustada~ .-Rota_ID, data = treino, ntree = 100, proximity = TRUE )
# Tentativa 3
model1.3 = randomForest(Demanda_Ajustada~ .-Rota_ID, data = treino, ntree = 50, proximity = TRUE )
# Tentativa 3
model1.3 = randomForest(Demanda_Ajustada~ .-Rota_ID, data = treino, ntree = 50, proximity = TRUE )
